// Generated by CoffeeScript 1.3.1
(function() {
  var War;

  War = (function() {

    War.name = 'War';

    function War(opts) {
      this.user = opts.user;
      this.enemy = opts.enemy;
      this.battleId = opts.battleId;
      this.userSocket = opts.userSocket;
      this.myTurn = opts.myTurn;
      this.ready = opts.ready;
      this.move_timer = opts.move_timer;
      this.shieldTurn = false;
      this.map = opts.map;
      this.context = this.map.canvas.getContext('2d');
      this.weapons = opts.weapons;
      this.weaponSet = false;
      opts = {
        "user": this.user,
        "battleId": this.battleId + ''
      };
      this.sendData("ready", opts);
    }

    War.prototype.checkMouseDown = function(e) {
      var coordinates, left, maxLeft, maxTop, position, squareHeight, top, x, y;
      if (this.ready < 2) {
        $('#notificationSmall').attr('class', 'info notification');
        return $('#notificationSmall').html("Your enemy it's not ready!").dequeue().stop().slideDown(200).delay(1700).slideUp(200);
      } else {
        if (!this.myTurn) {
          $('#notificationSmall').attr('class', 'alert notification');
          return $('#notificationSmall').html("It's not your turn").dequeue().stop().slideDown(200).delay(1700).slideUp(200);
        } else {
          squareHeight = this.map.squareHeight;
          position = this.map.position;
          maxTop = position.top + squareHeight * 10;
          maxLeft = position.left + squareHeight * 10;
          top = e.offsetY;
          left = e.offsetX;
          if (top < maxTop && top > position.top && left < maxLeft && left > position.left) {
            y = parseInt((top - position.top) / squareHeight);
            x = parseInt((left - position.left) / squareHeight);
            coordinates = {
              "x": x,
              "y": y
            };
            this.move_timer.clearMyInterval();
            if (!this.weaponSet) {
              this.sendData("attack", {
                "coordinates": coordinates,
                "battleId": this.battleId,
                "user": this.enemy
              });
            } else {
              this.sendData("weapon-set", {
                "coordinates": coordinates,
                "battleId": this.battleId,
                "user": this.enemy,
                "type": this.weaponSet
              });
              if (this.weaponSet === 'shield') {
                this.weapon_usage(x, y, 0, 60 * 11 - 27);
              }
            }
            return this.myTurn = false;
          }
        }
      }
    };

    War.prototype.sendData = function(event, message) {
      return this.userSocket.emit(event, message);
    };

    War.prototype.draw_attack = function(opts) {
      this.context.fillStyle = opts.fillStyle;
      this.context.beginPath();
      this.context.rect(opts.x, opts.y, opts.height, opts.height);
      this.context.fill();
      return this.context.stroke();
    };

    War.prototype.miss_attack = function(x, y, left, top) {
      var coordinates;
      this.draw_attack({
        x: x * 27 + top,
        y: y * 27 + left,
        height: 27,
        fillStyle: "#f2e9e1"
      });
      coordinates = {
        x: x,
        y: y
      };
      return this.sendData("miss-attack", {
        user: this.enemy,
        battleId: this.battleId,
        x: x,
        y: y,
        coordinates: coordinates
      });
    };

    War.prototype.weapon_usage = function(x, y, left, top) {
      var coordinates;
      this.draw_attack({
        x: x * 27 + top,
        y: y * 27 + left,
        height: 27,
        fillStyle: "#000000"
      });
      coordinates = {
        x: x,
        y: y
      };
      return this.sendData("weapon_usage", {
        user: this.enemy,
        battleId: this.battleId,
        x: x,
        y: y,
        coordinates: coordinates,
        "type": this.weaponSet
      });
    };

    War.prototype.hit_attack = function(x, y, left, top) {
      var coordinates;
      this.draw_attack({
        x: x * 27 + top,
        y: y * 27 + left,
        height: 27,
        fillStyle: "#f8ca00"
      });
      coordinates = {
        x: x,
        y: y
      };
      return this.sendData("hit-attack", {
        user: this.enemy,
        battleId: this.battleId,
        x: x,
        y: y,
        coordinates: coordinates
      });
    };

    War.prototype.head_attack = function(x, y, left, top) {
      var coordinates;
      this.draw_attack({
        x: x * 27 + top,
        y: y * 27 + left,
        height: 27,
        fillStyle: "#fa2a00"
      });
      coordinates = {
        x: x,
        y: y
      };
      return this.sendData("head-attack", {
        user: this.enemy,
        battleId: this.battleId,
        coordinates: coordinates
      });
    };

    return War;

  })();

  window.War = War;

}).call(this);
