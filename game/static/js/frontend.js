// Generated by CoffeeScript 1.3.1
(function() {
  var Frontend;

  Frontend = (function() {

    Frontend.name = 'Frontend';

    function Frontend(map) {
      this.map = map;
      this.planes = [];
      this.collession = false;
      this.collessions = null;
    }

    Frontend.prototype.addPlane = function(plane) {
      return this.planes.push(plane);
    };

    Frontend.prototype.checkMouseDown = function(e) {
      var plane, _i, _len, _ref;
      _ref = this.planes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        plane = _ref[_i];
        if (plane.checkMouseDown(e)) {
          return true;
        }
      }
      return false;
    };

    Frontend.prototype.checkMouseMove = function(e) {
      var plane, _i, _len, _ref, _results;
      _ref = this.planes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        plane = _ref[_i];
        if (plane.draggable) {
          plane.movePlane(e);
          this.collissions.resetCollissions();
          this.collession = this.collissions.checkCollissions(this.planes[0], this.planes[1]) === this.collissions.checkCollissions(this.planes[0], this.planes[2]);
          this.collession = this.collession === this.collissions.checkCollissions(this.planes[1], this.planes[2]);
          this.collissions.drawCollissions();
          _results.push(plane.droppeable = !this.collession);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Frontend.prototype.checkMouseUp = function(e) {
      var plane, _i, _len, _ref, _results;
      _ref = this.planes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        plane = _ref[_i];
        if (plane.draggable) {
          _results.push(plane.dropPlane(e));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Frontend;

  })();

  window.Frontend = Frontend;

}).call(this);
