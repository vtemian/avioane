// Generated by CoffeeScript 1.3.1
(function() {
  var User, Users, battleId, dude, enemy, myTurn, socket, war;

  socket = io.connect("http://outclan.com:5555");

  battleId = 0;

  war = "";

  enemy = "";

  myTurn = false;

  User = (function() {

    User.name = 'User';

    function User(username, avion, id) {
      this.username = username;
      this.avion = avion;
      this.id = id;
    }

    return User;

  })();

  Users = (function() {

    Users.name = 'Users';

    function Users() {
      this.dudes = {};
    }

    Users.prototype.add = function(user) {
      var htmlToApend;
      if (this.dudes.hasOwnProperty(user.id) === false) {
        this.dudes[user.id] = user;
        htmlToApend = '<li data-id="' + user.id + '"><h2 class="online_player_name"><h2 class="online_player_name"><a class="online_player_link">' + user.username + '</a></h2><div class="online_player_plane"><img src="/static/img/user/lobby/avioane/' + user.avion + '.png" alt="' + user.avion + '" /></div><h3 class="online_player_battle"><a data-id="' + user.id + '">battle</a></h3></li>';
        return $('#online_players_list').append(htmlToApend).hide().fadeIn(500);
      }
    };

    Users.prototype.remove = function(id) {
      delete this.dudes[id];
      return $("li:[data-id = '" + id + "']").remove();
    };

    return Users;

  })();

  dude = new Users();

  $(document).ready(function() {
    var battle;
    socket.emit("handshake", {
      username: username,
      id: id,
      avion: avion
    });
    socket.on("list", function(data) {
      var user;
      user = new User(data.username, data.avion, data.id);
      return dude.add(user);
    });
    socket.on("remove-online", function(id) {
      console.log(id);
      return dude.remove(id);
    });
    socket.on("online", function(data) {
      online += 1;
      return $("#online").html(data);
    });
    $("#user_battle").click(function() {
      return socket.emit("lobby-registration", {
        username: username,
        id: id
      });
    });
    battle = new Battle({
      'squareHeight': 60,
      'gameHolder': $('#map')
    });
    battle.init();
    socket.on("registration-complete", function(data) {
      return $.post('/lobby/join/', function(data) {
        var obj;
        obj = $.parseJSON(data);
        if (obj.not !== void 0) {
          $('#notification').html("Setting up battle...").dequeue().stop().slideDown(200).delay(1700).slideUp(200);
          $('#notification').attr('class', 'info');
          return myTurn = true;
        } else {
          return battleId = obj.battle;
        }
      });
    });
    socket.on("start-battle", function(data) {
      battleId = data.battleId;
      $.get('/battle/get-details/', {
        'battleId': battleId
      }, function(data) {
        var obj, user1, user2;
        obj = $.parseJSON(data);
        user1 = obj.user1;
        user2 = obj.user2;
        $('#lvl1').html("level: " + user1.lvl);
        $('#lvl2').html("level: " + user2.lvl);
        $('#won1').html("won: " + user1.won);
        $('#won2').html("won: " + user2.won);
        $('#lost1').html("lost: " + user1.lost);
        $('#lost2').html("lost: " + user2.lost);
        $('#img1').attr('src', "/static/img/user/lobby/avioane/" + user1.avion + ".png");
        $('#img2').attr('src', "/static/img/user/lobby/avioane/" + user2.avion + ".png");
        $('#versus_p1_name').html(user1.username);
        $('#versus_p2_name').html(user2.username);
        $('#sub_holder').remove();
        $('#lobby').remove();
        $('#versus').css('display', 'block');
        return setTimeout(function() {
          return $('#versus').fadeOut('slow', function() {
            $("#battle").fadeIn(500).css('display', 'block');
            return $("#start_battle_button").fadeIn(500).css('display', 'block');
          });
        }, 3000);
      });
      if (data.firstUser === username) {
        return enemy = data.secondUser;
      } else {
        return enemy = data.firstUser;
      }
    });
    socket.on("ready", function(data) {
      if (username !== data) {
        return console.log("your enemy is ready");
      }
    });
    socket.on("check-hit", function(data) {
      var x, y;
      war.myTurn = true;
      x = data.coordinates.x;
      y = data.coordinates.y;
      return $.post('/battle/attack/', {
        'x': x,
        'y': y,
        'battleID': battleId
      }, function(data) {
        if (data === 'miss') {
          return war.miss_attack(x, y, 0, 60 * 11 - 25);
        } else {
          if (data === 'hit') {
            return war.hit_attack(x, y, 0, 60 * 11 - 25);
          } else {
            if (data === 'finished') {
              return $.post('/battle/', {
                'state': 'loss',
                'enemy': enemy,
                'battleId': battleId
              }, function(data) {
                socket.emit("finish", {
                  battleId: battleId,
                  user: id
                });
                $('#notification').attr('class', 'alert');
                return $('#notification').html("You lost").dequeue().stop().slideDown(200).delay(1700).slideUp(200, function() {
                  return window.location = '/';
                });
              });
            } else {
              return war.head_attack(x, y, 0, 60 * 11 - 25);
            }
          }
        }
      });
    });
    socket.on("win", function() {
      $('#notification').attr('class', 'succes');
      return $('#notification').html("You won").dequeue().stop().slideDown(200).delay(1700).slideUp(200, function() {
        return window.location = '/';
      });
    });
    socket.on("miss", function(data) {
      var x, y;
      x = data.coordinates.x;
      y = data.coordinates.y;
      war.draw_attack({
        x: x * war.map.squareHeight + war.map.position.left,
        y: y * war.map.squareHeight + war.map.position.top,
        height: war.map.squareHeight,
        fillStyle: "#FFF"
      });
      return console.log("miss");
    });
    socket.on("hit", function(data) {
      var x, y;
      x = data.coordinates.x;
      y = data.coordinates.y;
      war.draw_attack({
        x: x * war.map.squareHeight + war.map.position.left,
        y: y * war.map.squareHeight + war.map.position.top,
        height: war.map.squareHeight,
        fillStyle: "blue"
      });
      return console.log("hit");
    });
    socket.on("head", function(data) {
      var x, y;
      x = data.coordinates.x;
      y = data.coordinates.y;
      war.draw_attack({
        x: x * war.map.squareHeight + war.map.position.left,
        y: y * war.map.squareHeight + war.map.position.top,
        height: war.map.squareHeight,
        fillStyle: "yellow"
      });
      return console.log("head");
    });
    socket.on("disconnectGame", function(data) {
      return $.post('/battle/disconnect/', {
        'enemy': enemy,
        'battleID': battleId
      }, function() {
        $('#notification').attr('class', 'succes');
        return $('#notification').html("You won").dequeue().stop().slideDown(200).delay(1700).slideUp(200, function() {
          return window.location = '/';
        });
      });
    });
    socket.on("receive-invitation", function(data) {
      var html;
      console.log(data);
      console.log("aasdasdadasdasdad");
      $('#notification').attr('class', 'succes');
      html = "<div id='invitation-notification' data-id='" + data.id + "'>" + data.username + " invited you to play! <button id='accept-invitation'>Accept</button><button id='decline-invitation'>Decline</button></div>";
      return $('#notification').html(html).dequeue().stop().slideDown(200);
    });
    $("#accept-invitation").live("click", function() {
      var id;
      id = $(this).parent().data('id');
      $.get('battle/accept-invitation/', function() {});
      return $(this).parent().parent().slideUp(200);
    });
    $("#start_battle_button").click(function() {
      var checked;
      checked = battle.checkReady(battleId);
      if (checked) {
        $("#start_battle_button").remove();
        war = new War({
          'user': id,
          'battleId': battleId,
          'userSocket': socket,
          'map': checked,
          'myTurn': myTurn
        });
        return war.map.canvas.onmousedown = function(e) {
          return war.checkMouseDown(e);
        };
      }
    });
    return $("li:[data-id]").live("click", function(e) {
      var id;
      id = $(this).data("id");
      return $.post("/battle/send-invitation/", {
        toUserId: id
      }, function(data) {
        return console.log(data);
      });
    });
  });

}).call(this);
