// Generated by CoffeeScript 1.3.1
(function() {
  var Battle, Battles, Clients, User, battles, io, lobby;

  io = require('socket.io').listen(5555);

  Clients = (function() {

    Clients.name = 'Clients';

    function Clients() {
      this.clients = {};
      this.length = 0;
    }

    Clients.prototype.add = function(client) {
      console.log('New player', client.username, client.socket.id);
      this.clients[client.socket.id] = client;
      return this.length++;
    };

    Clients.prototype.remove = function(socket) {
      delete this.clients[socket.id];
      return this.length--;
    };

    Clients.prototype.get = function(socket) {
      return this.clients[socket.id];
    };

    Clients.prototype.getById = function(id) {
      var client, idClient, _ref;
      _ref = this.clients;
      for (idClient in _ref) {
        client = _ref[idClient];
        if (client.id === id) {
          return client;
        }
      }
    };

    Clients.prototype.broadcast = function(event, data) {
      var client, id, _ref, _results;
      _ref = this.clients;
      _results = [];
      for (id in _ref) {
        client = _ref[id];
        _results.push(client.socket.emit(event, data));
      }
      return _results;
    };

    return Clients;

  })();

  User = (function() {

    User.name = 'User';

    function User(opts) {
      this.username = opts.username;
      this.socket = opts.socket;
      this.id = opts.id;
    }

    return User;

  })();

  Battle = (function() {

    Battle.name = 'Battle';

    function Battle(firstUser, secondUser, battleId) {
      this.firstUser = firstUser;
      this.secondUser = secondUser;
      this.battleId = battleId;
    }

    Battle.prototype.start = function() {
      return this.emit("start-battle", {
        firstUser: this.firstUser.username,
        secondUser: this.secondUser.username
      });
    };

    Battle.prototype.emit = function(event, message) {
      this.firstUser.socket.emit(event, message);
      return this.secondUser.socket.emit(event, message);
    };

    return Battle;

  })();

  Battles = (function() {

    Battles.name = 'Battles';

    function Battles() {
      this.battles = {};
    }

    Battles.prototype.add = function(battle) {
      this.battles[battle.id] = battle;
      return console.log("new battle in town!", battle);
    };

    Battles.prototype.remove = function(battle) {
      return delete this.battles[battle.id];
    };

    Battles.prototype.get = function(id) {
      return this.battles[id];
    };

    return Battles;

  })();

  lobby = new Clients();

  battles = new Battles();

  io.sockets.on('connection', function(socket) {
    socket.on('lobby-registration', function(data) {
      var newUser;
      newUser = new User({
        username: data.username,
        socket: socket,
        id: Number(data.id)
      });
      lobby.add(newUser);
      return lobby.broadcast('online', lobby.length);
    });
    socket.on('new-battle', function(data) {
      var battle, firstUser, secondUser;
      firstUser = lobby.getById(data.firstUser);
      secondUser = lobby.getById(data.secondUser);
      battle = new Battle(firstUser, secondUser, data.battleId);
      battles.add(battle);
      return battle.start();
    });
    socket.on('test', function(data) {
      return console.log(data);
    });
    return socket.on('disconnect', function() {
      return lobby.remove(socket);
    });
  });

}).call(this);
